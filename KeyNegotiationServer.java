/***************************************************************
 *
 * Key Negotiation Socket Server
 *
 * AES key generated by client to be used for all
 * encryption and decryption of data for the session
 *
 * Keytool commands to run beforehand:
 * keytool -genkeypair -alias ca -keyalg RSA -keysize 2048
 * keytool -genkeypair -alias webserver -keyalg RSA -keysize 2048
 *
 * A copy of ca certificate needs to be on the client machine
 *
 ***************************************************************/


import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.security.*;

public class KeyNegotiationServer extends Thread {

	// Local key to decrypt private key data
	private static SecretKey localKey;

	// Password to keystore
	private static char[] password;

	// Web Server data
	private byte[] webServerCertificateAndSignature;
	private KeyStore keyStore;

	// Network socket to communicate with client
	private ServerSocket serverSocket;

	private KeyNegotiationServer(int port) throws Exception {
		checkKeyLocation();

		// Get KeyStore password
		password = readPassword("KeyStore Password");

		// Get local AES key password
		byte[] localKeyPasswordSeed = new String(readPassword("Local Key Seed")).getBytes();
		localKey = generateLocalKey(localKeyPasswordSeed);

		serverSocket = new ServerSocket(port);
		keyStore = getKeyStore();
		webServerCertificateAndSignature = getWebServerCertAndSig();
	}

	public static void main(String[] args) {
		if (args.length != 1) {
			System.out.println("Usage: java KeyNegotiationServer <PORT_NO>");
			System.exit(0);
		}
		int port = Integer.parseInt(args[0]);
		try {
			Thread thread = new KeyNegotiationServer(port);
			thread.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void writeBytesToFile(String path, byte[] data) throws IOException {
		FileOutputStream fos = new FileOutputStream(path);
		fos.write(data);
		fos.close();
	}

	private char[] readPassword(String promptText) {
		// Get password
		Console console;
		char[] password;
		if ((console = System.console()) != null && (password = console.readPassword("[%s]: ", promptText)) != null) {
			return password;
		}
		return null;
	}

	private SecretKey generateLocalKey(byte[] passwordByte) throws NoSuchAlgorithmException {
		// MD5 produces 16 byte data for AES key generation
		// Hash password to get 128 bit / 16 byte data
		MessageDigest messageDigest = MessageDigest.getInstance("MD5");
		byte[] passwordDigest = messageDigest.digest(passwordByte);

		// Generate local key
		return new SecretKeySpec(passwordDigest, "AES");
	}

	private void checkKeyLocation() {
		String sessionKeyLocation = System.getProperty("user.home") + File.separator + "sessionKeys";
		File sessionKeyDirectory = new File(String.valueOf(sessionKeyLocation));
		if (!sessionKeyDirectory.exists() || !sessionKeyDirectory.isDirectory()) {
			System.out.println(sessionKeyLocation + " does not exists\nCreating directory");
			sessionKeyDirectory.mkdir();
		}
	}

	private KeyStore getKeyStore() throws Exception {
		// Get KeyStore object
		String keyStoreLocation = System.getProperty("user.home") + File.separatorChar + ".keystore";
		FileInputStream fileInputStream = new FileInputStream(new File(keyStoreLocation));
		KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());

		// Load KeyStore
		ks.load(fileInputStream, password);

		return ks;
	}

	private byte[] getWebServerCertAndSig() throws Exception {
		// Read web server cert as bytes
		System.out.println("Reading Web Server certificate");
		byte[] webServerCertificateBytes = keyStore.getCertificate("webserver").getEncoded();
		System.out.println(webServerCertificateBytes.length + " byte certificate");

		// Get CA private key from keystore
		System.out.println("Getting CA private key");
		KeyStore.ProtectionParameter protectionParameter = new KeyStore.PasswordProtection(password);
		KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry("ca", protectionParameter);
		PrivateKey caPrivateKey = privateKeyEntry.getPrivateKey();

		// Create DSA signature with CA's private key
		// Signature size in bytes is (key size / 8)
		System.out.println("Creating digital signature of web server certificate");
		Signature dsa = Signature.getInstance("SHA256withRSA");
		dsa.initSign(caPrivateKey);
		byte[] webServerCertificateSignature = dsa.sign();
		System.out.println(webServerCertificateSignature.length + " byte signature");

		// Append signature to cert
		System.out.println("Appending signature to certificate");
		byte[] webServerCertAndSig = new byte[webServerCertificateBytes.length + webServerCertificateSignature.length];
		System.arraycopy(webServerCertificateBytes, 0, webServerCertAndSig, 0, webServerCertificateBytes.length);
		System.arraycopy(webServerCertificateSignature, 0, webServerCertAndSig, webServerCertificateBytes.length, webServerCertificateSignature.length);
		System.out.println(webServerCertAndSig.length + " byte certificate and signature");

		return webServerCertAndSig;
	}

	private PrivateKey getWebServerPrivateKey() throws Exception {
		// Get web server private key
		KeyStore.ProtectionParameter protectionParameter = new KeyStore.PasswordProtection(password);
		KeyStore.PrivateKeyEntry privateKeyEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry("webserver", protectionParameter);

		return privateKeyEntry.getPrivateKey();
	}

	public void run() {
		while (true) {
			try {
				// Create cipher
				Cipher cipher;

				// Open server socket
				System.out.println("\nWaiting for client on port " + serverSocket.getLocalPort() + "...");

				// Accept client connection to server socket
				Socket server = serverSocket.accept();
				System.out.println("Connection from " + server.getRemoteSocketAddress());

				// Data streams to communicate with client
				DataInputStream dataInputStream = new DataInputStream(server.getInputStream());
				DataOutputStream dataOutputStream = new DataOutputStream(server.getOutputStream());

				// Receive client hello
				if (dataInputStream.readUTF().equals("HELLO")) {
					System.out.println("Client HELLO received");
				} else {
					System.out.println("Client HELLO not received");
					continue;
				}

				// Send web server cert with signature
				System.out.println("Sending certificate with signature");
				dataOutputStream.writeInt(webServerCertificateAndSignature.length);
				dataOutputStream.flush();
				dataOutputStream.write(webServerCertificateAndSignature);
				dataOutputStream.flush();

				// Get response from client
				System.out.println("Waiting for response...");
				if (!dataInputStream.readUTF().equals("OK")) {
					System.out.println("No response from client");
					continue;
				}
				System.out.println("Client OK");

				// Receive encrypted IV and AES session key from client
				System.out.println("Waiting to receive AES key...");
				byte[] encryptedIvAndAESKey = new byte[0];
				int length = dataInputStream.readInt();
				if (length > 0) {
					encryptedIvAndAESKey = new byte[length];
					dataInputStream.readFully(encryptedIvAndAESKey);
				}
				System.out.println("Successfully received IV and AES session key");

				// Send response
				System.out.println("Sending response");
				dataOutputStream.writeUTF("OK");
				dataOutputStream.flush();

				// Decrypt to obtain IV and AES session key
				System.out.println("Decrypting encrypted IV and AES session key with web server private key");
				cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
				PrivateKey webServerPrivateKey = getWebServerPrivateKey();
				cipher.init(Cipher.DECRYPT_MODE, webServerPrivateKey);
				byte[] iVAndAESBytes = cipher.doFinal(encryptedIvAndAESKey);

				// Encrypt IV and AES session key with local symmetric key
				System.out.println("Encrypting IV and AES session key with local AES key");
				cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
				cipher.init(Cipher.ENCRYPT_MODE, localKey);
				byte[] symmetricEncryptedAESKey = cipher.doFinal(iVAndAESBytes);

				// Write IV and AES session key to file
				String sessionKeyLocation = System.getProperty("user.home") + File.separator + "sessionKeys";
				String aesKeyPath = sessionKeyLocation + File.separator + server.getInetAddress().toString().substring(1) + ".aes";
				System.out.println("Writing IV and AES session key to " + aesKeyPath);
				writeBytesToFile(aesKeyPath, symmetricEncryptedAESKey);

				// Send END to client to end connection
				System.out.println("Sending END to client");
				dataOutputStream.writeUTF("END");
				dataOutputStream.flush();

				// Close socket and data streams
				dataInputStream.close();
				dataOutputStream.close();
				server.close();
			} catch (SocketTimeoutException s) {
				System.out.println("Socket timed out!");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

}
